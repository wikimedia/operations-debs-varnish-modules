varnishtest "Test the block parameter"

varnish v1 -vcl {
	import vsthrottle from "${vmod_builddir}/.libs/libvmod_vsthrottle.so";
        backend b { .host = "${bad_ip}"; }

        sub vcl_recv {
                return(synth(200));
        }

	sub vcl_synth {
                set resp.http.block = vsthrottle.is_denied("quux", 2, 1s, 2s);
                set resp.http.blocked = vsthrottle.blocked("quux", 2, 1s, 2s);
                return(deliver);
	}
} -start

client c1 {
	txreq
        rxresp
        expect resp.http.block == "false"
        expect resp.http.blocked ~ "^0[.]0+$"

	txreq
	rxresp
        expect resp.http.block == "false"
        expect resp.http.blocked ~ "^0[.]0+$"

	txreq
	rxresp
        expect resp.http.block == "true"
        expect resp.http.blocked ~ "^[12][.][0-9]+$"

        delay 1.1
	txreq
	rxresp
        expect resp.http.block == "true"
        expect resp.http.blocked ~ "^0[.][0-9]+$"

        delay 1.1
	txreq
	rxresp
        expect resp.http.block == "false"
        expect resp.http.blocked ~ "^0[.]0+$"
} -run

# If block <= 0s, then is_denied() ignores it. So this is just the
# same test as in test01.vtc, except that block is set with such a
# value.
varnish v1 -vcl {
	import vsthrottle from "${vmod_builddir}/.libs/libvmod_vsthrottle.so";
        backend b { .host = "${bad_ip}"; }

        sub vcl_recv {
                return(synth(200));
        }

	sub vcl_synth {
		set resp.http.foo-count0
                    = vsthrottle.remaining("foo", 1, 1s, 0s);
		if (!vsthrottle.is_denied("foo", 1, 1s, 0s)) {
			set resp.http.f1 = "OK";
		}
		set resp.http.foo-count1
                    = vsthrottle.remaining("foo", 1, 1s, 0s);

		if (!vsthrottle.is_denied("foo", 1, 1s, 0s)) {
			set resp.http.f2 = "OK";
		}
		set resp.http.foo-count2
                    = vsthrottle.remaining("foo", 1, 1s, 0s);

		set resp.http.bar-count0
                    = vsthrottle.remaining("bar", 1, 1s, 0s);
		if (!vsthrottle.is_denied("bar", 1, 1s, 0s)) {
			set resp.http.f3 = "OK";
		}
		set resp.http.bar-count1
                    = vsthrottle.remaining("bar", 1, 1s, 0s);

		set resp.http.f4-count0
                    = vsthrottle.remaining(req.http.not-found, 1, 1s, 0s);
		if (vsthrottle.is_denied(req.http.not-found, 10, 100s, 0s)) {
			set resp.http.f4 = "NULL";
		}
		set resp.http.f4-count1
                    = vsthrottle.remaining(req.http.not-found, 1, 1s, 0s);

                return(deliver);
	}
}

client c1 {
	txreq
	rxresp
	expect resp.http.f1 == "OK"
	expect resp.http.foo-count0 == "1"
	expect resp.http.foo-count1 == "0"
	expect resp.http.f2 == <undef>
	expect resp.http.foo-count2 == "0"
	expect resp.http.f3 == "OK"
	expect resp.http.bar-count0 == "1"
	expect resp.http.bar-count1 == "0"
	expect resp.http.f4 == "NULL"
	expect resp.http.f4-count0 == "-1"
	expect resp.http.f4-count1 == "-1"
} -run
